package todo

import (
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// MockTodoService implements TodoServiceInterface for testing
type MockTodoService struct {
	mock.Mock
}

func (m *MockTodoService) ListTodos() ([]string, error) {
	args := m.Called()
	return args.Get(0).([]string), args.Error(1)
}

// Add other required method implementations for the interface...

func TestListTodos(t *testing.T) {
	tests := []struct {
		name          string
		setupMock     func(*MockTodoService)
		expectedCode  int
		expectedTodos []string
		expectedError bool
	}{
		{
			name: "successful list todos",
			setupMock: func(m *MockTodoService) {
				m.On("ListTodos").Return([]string{"todo1.md", "todo2.md"}, nil)
			},
			expectedCode:  http.StatusOK,
			expectedTodos: []string{"todo1.md", "todo2.md"},
			expectedError: false,
		},
		{
			name: "empty todo list",
			setupMock: func(m *MockTodoService) {
				m.On("ListTodos").Return([]string{}, nil)
			},
			expectedCode:  http.StatusOK,
			expectedTodos: []string{},
			expectedError: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Setup
			mockService := new(MockTodoService)
			tt.setupMock(mockService)
			handler := NewTodoHandler(mockService)

			// Create request
			req := httptest.NewRequest(http.MethodGet, "/todos", nil)
			w := httptest.NewRecorder()

			// Execute request
			handler.ListTodos(w, req)

			// Assert response
			assert.Equal(t, tt.expectedCode, w.Code)

			if !tt.expectedError {
				var response TodoListResponse
				err := json.NewDecoder(w.Body).Decode(&response)
				assert.NoError(t, err)
				assert.Equal(t, tt.expectedTodos, response.Todos)
			}

			// Verify all mock expectations were met
			mockService.AssertExpectations(t)
		})
	}
}
